AWSTemplateFormatVersion: '2010-09-09'
Description: Chat API system
Parameters:
  codeBucketName:
    Type: String
    Description: Source code bucket name
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: Id
          AttributeType: S
        -
          AttributeName: Field
          AttributeType: S
      BillingMode: PROVISIONED
      GlobalSecondaryIndexes:
        -
          IndexName: GSI1
          KeySchema:
            -
              AttributeName: Field
              KeyType: HASH
            -
              AttributeName: Id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      KeySchema:
        -
          AttributeName: Id
          KeyType: HASH
        -
          AttributeName: Field
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  tableScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
              Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: 'root'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:UpdateTable'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:SetAlarmState'
                  - 'cloudwatch:DeleteAlarms'
                Resource: '*'
  tableReadCapacityTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 400
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref table
      RoleARN: !GetAtt tableScaleRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  tableWriteCapacityTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 400
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref table
      RoleARN: !GetAtt tableScaleRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  tableGSI1ReadCapacityTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 400
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref table
          - index
          - GSI1
      RoleARN: !GetAtt tableScaleRole.Arn
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      ServiceNamespace: dynamodb
  tableGSI1WriteCapacityTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 400
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref table
          - index
          - GSI1
      RoleARN: !GetAtt tableScaleRole.Arn
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      ServiceNamespace: dynamodb
  tableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: tableReadScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref tableReadCapacityTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 900
        ScaleOutCooldown: 120
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  tableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: tableWriteScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref tableWriteCapacityTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 900
        ScaleOutCooldown: 120
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  tableGSI1ReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: tableGSI1ReadScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref tableGSI1ReadCapacityTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 900
        ScaleOutCooldown: 120
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  tableGSI1WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: tableGSI1WriteScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref tableGSI1WriteCapacityTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 900
        ScaleOutCooldown: 120
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Chat WebSocket API
  tableAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Access to app DynamoDB table
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
            Resource:
              - !Join
                - ':'
                - - 'arn:aws:dynamodb'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Join
                    - /
                    - - table
                      - !Ref table
              - !Join
                - ':'
                - - 'arn:aws:dynamodb'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Join
                    - /
                    - - table
                      - !Ref table
                      - index
                      - GSI
  manageConnectionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Manage API Gateway connections policy
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Join
                - ':'
                - - 'arn:aws:execute-api'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Join
                    - /
                    - - !Ref api
                      - '*'
                      - '*'
                      - '*'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  onConnect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/connect.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onConnectLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onConnect
      RetentionInDays: 30
  onDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/disconnect.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onDisconnectLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onDisconnect
      RetentionInDays: 30
  onJoin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/join.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onJoinLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onJoin
      RetentionInDays: 30
  onNick:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/nick.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onNickLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onNick
      RetentionInDays: 30
  onLeave:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/leave.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onLeaveLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onLeave
      RetentionInDays: 30
  onMessage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/message.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  onMessageLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref onMessage
      RetentionInDays: 30
  sendPing:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref codeBucketName
        Key: code/send_ping.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 10
      MemorySize: 128
      Policies:
        - !Ref tableAccessPolicy
        - !Ref manageConnectionsPolicy
      Environment:
        Variables:
          TABLE_NAME: !Ref table
  sendPingLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - '/aws/lambda'
          - !Ref sendPing
      RetentionInDays: 7
  sendPingSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Send WebSocket PING schedule'
      ScheduleExpression: cron(3/6 * * * ? *)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt sendPing.Arn
          Id: SendPingFunction
  sendPingSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref sendPing
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt sendPingSchedule.Arn
  onConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onConnect.Arn
      Principal: apigateway.amazonaws.com
  onConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onConnect.Arn
              - invocations
  onConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: '$connect'
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onConnectInteg
  onDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onDisconnect.Arn
      Principal: apigateway.amazonaws.com
  onDisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onDisconnect.Arn
              - invocations
  onDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: '$disconnect'
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onDisconnectInteg
  onJoinPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onJoin.Arn
      Principal: apigateway.amazonaws.com
  onJoinInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onJoin.Arn
              - invocations
  onJoinRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: 'join'
      OperationName: JoinRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onJoinInteg
  onNickPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onNick.Arn
      Principal: apigateway.amazonaws.com
  onNickInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onNick.Arn
              - invocations
  onNickRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: 'nick'
      OperationName: NickRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onNickInteg
  onLeavePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onLeave.Arn
      Principal: apigateway.amazonaws.com
  onLeaveInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onLeave.Arn
              - invocations
  onLeaveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: 'leave'
      OperationName: LeaveRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onLeaveInteg
  onMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt onMessage.Arn
      Principal: apigateway.amazonaws.com
  onMessageInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ':'
        - - 'arn:aws:apigateway'
          - !Ref AWS::Region
          - !Join
            - '/'
            - - 'lambda:path'
              - '2015-03-31'
              - functions
              - !GetAtt onMessage.Arn
              - invocations
  onMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref api
      RouteKey: 'message'
      OperationName: MessageRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref onMessageInteg
  apiDeployV1:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref api
    DependsOn:
      - onConnectRoute
      - onDisconnectRoute
      - onJoinRoute
      - onNickRoute
      - onLeaveRoute
      - onMessageRoute
  apiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref api
      DeploymentId: !Ref apiDeployV1
      Description: 'WebSocket API deploy'
      StageName: prod